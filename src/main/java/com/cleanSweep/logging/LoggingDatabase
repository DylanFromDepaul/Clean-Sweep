/*5.1 LoggingDatabase
Folder: /src/main/java/com/cleanSweep/database/
Description: Handles persistence for logs using JPA and Hibernate. Logs details such as robot movement, dirt collection, and battery consumption.
Parameters:
EntityManager entityManager: JPA entity manager for database interactions.
Methods:
void saveLog(String logEntry): Saves a log entry to the database.
List<Log> retrieveLogs(): Retrieves all logs from the database for diagnostics.
void clearLogs(): Clears the log table for fresh data.
*/

package logging;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.time.LocalDateTime;

public class LoggingDatabase {
    
    private static LoggingDatabase instance;
    private EntityManagerFactory emf;
    private EntityManager em;

    // Singleton pattern for the database logger
    private LoggingDatabase() {
        emf = Persistence.createEntityManagerFactory("clean_sweep_logs");
        em = emf.createEntityManager();
    }

    public static LoggingDatabase getInstance() {
        if (instance == null) {
            instance = new LoggingDatabase();
        }
        return instance;
    }

    // Save log event to the database
    public void saveLogEvent(String event) {
        em.getTransaction().begin();
        LogEntry logEntry = new LogEntry();
        logEntry.setTimestamp(LocalDateTime.now());
        logEntry.setMessage(event);
        em.persist(logEntry);
        em.getTransaction().commit();
    }

    // Save movement log
    public void saveMovementLog(int x, int y, String direction) {
        String event = "Moved to (" + x + ", " + y + ") in direction: " + direction;
        saveLogEvent(event);
    }

    // Save cleaning log
    public void saveCleaningLog(int x, int y) {
        String event = "Cleaned dirt at (" + x + ", " + y + ")";
        saveLogEvent(event);
    }

    // Save power consumption log
    public void savePowerLog(int remainingBattery) {
        String event = "Battery remaining: " + remainingBattery + " units";
        saveLogEvent(event);
    }

    // Query logs (placeholder for future enhancements)
    public void queryLogs() {
        // Add query methods to fetch logs from the database
    }

    // Close the entity manager and factory
    public void closeDatabase() {
        em.close();
        emf.close();
    }
}
