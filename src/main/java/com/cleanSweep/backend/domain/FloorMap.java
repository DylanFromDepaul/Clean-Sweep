package com.cleanSweep.backend.domain;

import com.cleanSweep.backend.common.FloorType;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.Getter;
import lombok.Setter;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.util.List;

@Getter
@Setter
@Component
public class FloorMap {

    private Cell[][] cells;

    /**
     * Initialize the grid based on the given gridSize.
     * @param size grid size
     */
    public void initializeGrid(int size) {
        cells = new Cell[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                cells[i][j] = new Cell(i, j, FloorType.BARE_FLOOR, false, false, false, false, 0);
            }
        }
    }

    /**
     * Load FloorMap data from a JSON file.
     * @param filePath JSON file path
     */
    public void loadFromFile(String filePath) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            FloorPlanData floorPlanData = objectMapper.readValue(new File(filePath), FloorPlanData.class);
            initializeCells(floorPlanData);
        } catch (IOException e) {
            System.err.println("Error loading floor map from file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Initialize cells and overwrite the default grid configuration.
     * @param floorPlanData Data in JSON file
     */
    private void initializeCells(FloorPlanData floorPlanData) {
        int size = floorPlanData.getFloorSize();
        cells = new Cell[size][size];

        // Initialize default cells
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                cells[i][j] = new Cell(i, j, FloorType.BARE_FLOOR, false, false, false, false, 0);
            }
        }

        // Using JSON data to overwrite specific cells
        for (CellData cellData : floorPlanData.getCells()) {
            cells[cellData.getX()][cellData.getY()] = new Cell(
                    cellData.getX(),
                    cellData.getY(),
                    cellData.getFloorType(),
                    false, // isVisited default is false
                    cellData.isChargingStation(),
                    false, // IsObstacle is dynamically generated by SensorSimulatorService
                    cellData.isStairs(),
                    0 // DirtLevel is dynamically generated by SensorSimulatorService
            );
        }
    }

    @Getter
    static class FloorPlanData {
        private int floorSize;
        private List<CellData> cells;
    }

    @Getter
    static class CellData {
        private int x;
        private int y;
        private FloorType floorType;

        @JsonProperty("isChargingStation")
        private boolean isChargingStation;

        @JsonProperty("isStairs")
        private boolean isStairs;
    }
}
